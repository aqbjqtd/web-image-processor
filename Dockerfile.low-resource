# 低配VPS优化版Dockerfile
# 针对512MB-1GB内存的VPS优化
# 使用预构建镜像减少构建时资源消耗

FROM nginx:1.25-alpine

# 安装必要工具
RUN apk add --no-cache curl ca-certificates tzdata && \
    rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非root用户（安全考虑）
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-user -g nginx-user nginx-user

# 复制预构建的静态文件（需要先在本地构建）
# 使用方法：先在本地运行 npm run build，然后复制dist/spa目录
COPY dist/spa /usr/share/nginx/html

# 复制优化的nginx配置
COPY nginx-low-resource.conf /etc/nginx/nginx.conf

# 设置权限
RUN chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx

# 创建临时目录
RUN mkdir -p /tmp/nginx && \
    chown -R nginx-user:nginx-user /tmp/nginx

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=60s --timeout=5s --start-period=30s --retries=2 \
    CMD curl -f http://localhost:8080/health || exit 1

# 切换到非root用户
USER nginx-user

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]